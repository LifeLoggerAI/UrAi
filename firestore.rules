
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isOwner(uid) {
      return request.auth != null && request.auth.uid == uid;
    }

    function isAuthenticated() {
      return request.auth != null;
    }

    // V6 Foundation: User profiles and settings
    match /users/{userId} {
      allow read: if isOwner(userId);
      allow write: if isOwner(userId);
    }

    // V6 Foundation: Pro tier subscriptions
    match /proTiers/{userId} {
      allow read: if isOwner(userId);
      allow write: if false; // Only server functions can write subscription data
    }

    // V6 Foundation: Privacy zones and consent
    match /privacyZones/{userId} {
      allow read, write: if isOwner(userId);
    }

    match /consentManagement/{userId} {
      allow read, write: if isOwner(userId);
    }

    // V6 Foundation: Notifications
    match /notifications/{userId}/{notificationId} {
      allow read, write: if isOwner(userId);
    }

    // Core user-owned collections
    match /{collection}/{docId} {
      allow read, write: if isAuthenticated() && isOwner(resource.data.uid);
    }
    
    // User subcollections (exports, settings, etc.)
    match /users/{userId}/{collection}/{docId} {
      allow read, write: if isOwner(userId);
    }

    // V7 Social: Constellation rooms (public read, member write)
    match /constellationRooms/{roomId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && 
        (request.auth.uid in resource.data.members || request.auth.uid == resource.data.creator);
    }

    // V7 Social: Room messages
    match /constellationRooms/{roomId}/messages/{messageId} {
      allow read: if isAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/constellationRooms/$(roomId)).data.members;
      allow create: if isAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/constellationRooms/$(roomId)).data.members;
      allow update, delete: if isOwner(resource.data.authorId);
    }

    // V8 Global: Emotional Weather (public read)
    match /globalEmotionalWeather/{docId} {
      allow read: if true; // Public read for aggregated data
      allow write: if false; // Only functions can write
    }

    // V8 Global: Soul Vault (user-owned with notarization)
    match /soulVault/{userId}/{entryId} {
      allow read, write: if isOwner(userId);
    }

    // V10 Advanced: Teams and sharing
    match /teams/{teamId} {
      allow read: if isAuthenticated() && request.auth.uid in resource.data.members;
      allow write: if isAuthenticated() && 
        (request.auth.uid in resource.data.admins || request.auth.uid == resource.data.creator);
    }

    // V10 Advanced: Marketplace items
    match /marketplace/{itemId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update, delete: if isOwner(resource.data.sellerId);
    }

    // V11 Immersive: Plugin ecosystem
    match /plugins/{pluginId} {
      allow read: if true; // Public plugin directory
      allow write: if isOwner(resource.data.developerId);
    }

    match /userPlugins/{userId}/{pluginId} {
      allow read, write: if isOwner(userId);
    }

    // Leads collection (for marketing)
    match /leads/{leadId} {
      allow read, update, delete: if false;
      allow create: if true;
    }

    // Admin collections (restricted)
    match /admin/{document=**} {
      allow read, write: if false; // Admin access only through functions
    }

    // Fallback: deny all other access
    match /{path=**} {
      allow read, write: if false;
    }
  }
}
